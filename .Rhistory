c<- CikCount$ip[1:10]
both<- cbind(a,b,c)
both<- as.data.frame(both)
both %>% ggvis(~a, ~b ,fill= ~c) %>% layer_points()
####################
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
ip100<- LogfileData$ip[1:100]
LogfileData %>%
group_by(ip100) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
LogfileData %>%
group_by(ip==ip100) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
LogfileData %>%
group_by(ip=ip100) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
length(unique(ip100))
####################
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
ip100<- unique( LogfileData$ip[1:100])
length(unique(ip100))
length(ip100)
####################
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
ip100<- unique( LogfileData$ip[1:1000])
length(unique(ip100))
length(ip100)
####################
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
ip100<- unique( LogfileData$ip[1:5000])
length(unique(ip100))
length(ip100)
ip100<-as.data.frame(ip100)
View(LogfileData)
View(IpCount)
View(ip100)
LogfileData$ip[names(ip)==ip100]
LogfileData$ip[names(LogfileData$ip)==ip100]
####################
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
ip100<- unique( LogfileData$ip[1:5000])
LogfileData$ip[names(LogfileData$ip)==ip100]
LogfileData$ip[names(LogfileData$ip)=ip100]
LogfileData$ip[names(LogfileData$ip) %in% ip100]
LogfileData$ip[names(LogfileData$ip) %in% ip100,]
LogfileData$ip[LogfileData$ip %in% ip100,]
LogfileData[LogfileData$ip %in% ip100,]
a<- LogfileData[LogfileData$ip %in% ip100,]
View(a)
a<- IpCount[IpCount$ip %in% ip100,]
View(a)
b<- AcceCount[AcceCount$ip %in% ip100]
b<- CikCount[CikCount$ip %in% ip100]
View(a)
b<- CikCount[CikCount$ip %in% ip100,]
View(b)
b<- CikCount[CikCount$ip %in% ip100,3]
View(a)
View(b)
b<- CikCount[CikCount$ip %in% ip100,]
b<- CikCount[CikCount$ip[1:164] %in% ip100,]
b<- b[1:164,]
both<- cbind(a,b)
View(both)
LogfileData%>%
group_by(ip)%>%
summarise_each(funs(count),cik)
k<-LogfileData%>%
group_by(ip)%>%
summarise_each(funs(count),cik)
k<-LogfileData%>%
group_by(ip)%>%
summarise_each(funs(tally),cik)
k<-LogfileData%>%
group_by(ip)%>%
summarise_each(funs(tally(n)),cik)
both %>% ggvis(~n, ~n ,fill= ~ip) %>% layer_points()
both %>% ggvis(~n ,fill= ~ip) %>% layer_points()
View(a)
View(CikCount)
b<- CikCount[CikCount$ip=="1364250" %in% ip100,]
b<- CikCount[CikCount$cik=="1364250" %in% ip100,]
View(b)
b<- CikCount[CikCount$cik=="1523101" %in% ip100,]
b<- CikCount[CikCount$cik=="21665" %in% ip100,]
CikCount<- LogfileData %>%
group_by(cik=="208.83.223.jeh",ip) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
View(CikCount)
CikCount<- LogfileData %>%
group_by(cik,ip) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
CikCount<- LogfileData %>%
group_by(cik=="1364250",ip) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
CikCount<- LogfileData %>%
group_by(cik,ip) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
CikCount<- LogfileData %>%
group_by(cik,ip) %>%
filter(cik=="1364250")%>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
View(CikCount)
a<- IpCount[IpCount$ip %in% CikCount$ip,]
View(a)
rm(both)
rm(b)
CikCount$ip=="100.43.83.iee"
a$ip=="202.162.160.hjh"
both<- cbind(cikcount,a)
both<- cbind(CikCount,a)
View(both)
which( both(both$ip, both$ip, "==")
which( both(both$ip, both$ip, "=="))
both
which( both(both$ip, both$ip, "=="))
which( outer(both$ip, both$ip, "=="))
b<-which( outer(both$ip, both$ip, "=="))
b<-which( outer(both$ip, both$ip, "=="),arr.ind=TRUE)
View(b)
b<-which( outer(both$ip, both$n, "=="),arr.ind=TRUE)
both %>% arrange(ip, n, n)
both %>% arrange(ip, n)
both %>% arrange(ip)
both %>% arrange(n)
CikCount %>% arrange(n)
b<-CikCount %>% arrange(n)
View(b)
b<-CikCount %>% arrange(ip)
b<-a %>% arrange(ip)
View(b)
b<-CikCount %>% arrange(ip)
View(b)
CikCount<- LogfileData %>%
group_by(cik,ip) %>%
filter(cik=="1364250")%>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(ip)
View(CikCount)
a<- a%>% arrange(ip)
regr<- data.frame(cik=CikCount$cik,ip=CikCount$ip,cikFreq= CikCount$n, ipFreq= a$n)
View(regr)
regr %>% ggvis(~cikFreq,~ipFreq,fill= ~ip) %>% layer_points()
plot(regr)
plot(regr$cikFreq)
plot(regr$ipFreq)
regr %>% ggvis(~cikFreq,~ipFreq,fill= ~ip) %>% layer_points()
regr %>% ggvis(~cikFreq,fill= ~ip) %>% layer_points()
regr %>% ggvis(~cikFreq,~ipFreq,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~cikFreq,~ip,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~cikFreq,~ipFreq,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~ipFreq,~ipFreq,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~ipFreq,~cikFreq,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~ipFreq,~cikFreq,fill= ~cikFreq) %>% layer_points()
# Overall correlation ipFreq and cikfreq
cor(regr$ipFreq,regr$cikFreq)
#linear modeling
linearmod<- lm(data = regr, cikFreq~ ipFreq)
linearmod
#ipF= intercept+ (B*ipFreq)
ipF= 37.73736+ 0.03624*ipFreq
#ipF= intercept+ (B*ipFreq)
#(ipF= 37.73736+ 0.03624*ipFreq)
summary(linearmod)
install.packages("class")
library(class)
# summary of the data
summary(both)
# summary of the data
summary(regr)
#our data needs normalization since the values are wide spread.
NormRerg<- as.data.frame(lapply(regr,normalize))
#our data needs normalization since the values are wide spread.
#normalize function
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
NorRerg<- as.data.frame(lapply(regr), normalize())
NorRerg<- as.data.frame(lapply(regr[1:10]), normalize())
NorRerg<- as.data.frame(lapply(regr[1:10]), normalize)
NorRerg<- as.data.frame(lapply(regr[1:10], normalize))
NorRerg<- as.data.frame(lapply(regr[,1:4], normalize))
NorRerg<- as.data.frame(lapply(regr, normalize))
NorRerg<- as.data.frame(lapply(regr[,3:4], normalize))
View(NorRerg)
# training and testing
ind <- sample(2, nrow(NorRerg), replace=TRUE, prob=c(0.67, 0.33))
NorRergtrain<- NorRerg[ind==1,1:4]
NorRergtrain<- NorRerg[ind==1,1:2]
View(NorRergtrain)
Rerg.train<- NorRerg[ind==1,1:2]
Rerg.test<- NorRerg[ind=2,1:2]
Rerg.test<- NorRerg[ind==2,1:2]
#building the prediction lables
Rerg.trainLable<- NorRerg[ind==1,3]
print(Rerg.trainLable)
Rerg.testLable<- NorRerg[ind==2,3]
print(Rerg.testLable)
#building the prediction lables
Rerg.trainLable<- Rerg[ind==1,2]
#building the prediction lables
Rerg.trainLable<- rerg[ind==1,2]
#building the prediction lables
Rerg.trainLable<- regr[ind==1,2]
#check
print(Rerg.trainLable)
Rerg.testLable<- regr[ind==2,3]
print(Rerg.testLable)
Rerg.testLable<- regr[ind==2,2]
print(Rerg.testLable)
#setting the wrok directory.
setwd("~/rprojects/Cyber and Information security in R")
#loding data in r. the data is in .txt format.
Mydata<- read.delim(file ="data1.txt" , header = T, sep = "\t")
#cheking the data structure
str(Mydata)
# we can check if the data it is supposed to be
#checking the first 10 rows
head(Mydata[1:10,])
# check the last few rows
tail(Mydata)
#view the whole table
View(Mydata)
#view the row 100 to 110 in table format
View(Mydata[100:110,])
#after take a look ata the data we note:
# some filds are in the wrong format e.g date is a factor and shoul be date
#there miss values (na) which is not good
# (#NAME?) an error that occures in excel.
#as per this stage we will correct the format for Ip,Date and time fields.
#make a copy of the data. this is the data we will be working with.
LogfileData<- Mydata
#for ip address we want it as character.
LogfileData$ip<-as.character(LogfileData$ip)
# date should be date format.
LogfileData$date<-as.Date.character(LogfileData$date, "%m/%d/%Y")
#time should be in time formt
LogfileData$time<- strptime(LogfileData$time,format='%H:%M:%S')
LogfileData$time<-format(LogfileData$time, "%H:%M:%S")
# checking the data structure.
str(LogfileData)
#deal with the #Name Error.
#the error is a s a result of the "=" sing in the execel file.
# we know the value shoulld be =-index.htm
# make sure it is in character
LogfileData$extention<- as.character(LogfileData$extention)
LogfileData$extention[LogfileData$extention=="#NAME?"]<- "=-index.htm"
#At this stage we will filtre the dat for analysis and do some visualization.
#we need the dplr package to
#install the package
#install.packages("dplyr")
#load the apckage in r
require("dplyr")
#Check howmany unique ip addres we have
length(unique(LogfileData$ip))
#checking how many times each ip address accessed the site
IpCount<- LogfileData %>%
group_by(ip) %>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(desc(n))
#analysis
head(IpCount)
#notice that there some ip with thousands of access.
#since the data collected was for one day this humanly imposble.
#this might be bots.
####################################
# lets plot the top 20 in ipcount
library(ggplot2)
top10<-(head(IpCount,10))
#graph
ggplot(top10,aes(x=ip,y= n,  fill=ip))+
geom_histogram(stat = "identity",colour="black", show.legend = T, binwidth = 5 )+
scale_fill_brewer(palette = "Paired")+
xlab("IpAdress")+
ylab("Log Frequency")+
theme(axis.text.y = element_text(angle = 45,hjust = 1,color = "blue"))+
ggtitle("Top 10 By Ipadress")+
theme(plot.title = element_text(face = "bold",size = 15))
CikCount<- LogfileData %>%
group_by(cik,ip) %>%
filter(cik=="1364250")%>%
tally(n(),sort = FALSE)%>%
ungroup() %>%
arrange(ip)
#install.packages("ggvis")
library(ggvis)
#we are goin to take the first 100 ip address from data logfileData
# and check how many times each Ip acces cik, accessin and extention.
a<- IpCount[IpCount$ip %in% CikCount$ip,]
a<- a%>% arrange(ip)
both<- cbind(CikCount,a)
regr<- data.frame(cik=CikCount$cik,ip=CikCount$ip,cikFreq= CikCount$n, ipFreq= a$n)
regr %>% ggvis(~cikFreq,~ipFreq,fill= ~ipFreq) %>% layer_points()
regr %>% ggvis(~ipFreq,~cikFreq,fill= ~cikFreq) %>% layer_points()
# Overall correlation ipFreq and cikfreq
cor(regr$ipFreq,regr$cikFreq)
#linear modeling
linearmod<- lm(data = regr, cikFreq~ ipFreq)
linearmod
#ipF= intercept+ (B*ipFreq)
#(ipF= 37.73736+ 0.03624*ipFreq)
summary(linearmod)
ip100
#KNN machine learing model
#install packages class
#install.packages("class")
# load packages
library(class)
# summary of the data
summary(regr)
#our data needs normalization since the values are wide spread.
#normalize function
normalize <- function(x) {
num <- x - min(x)
denom <- max(x) - min(x)
return (num/denom)
}
NorRerg<- as.data.frame(lapply(regr[,3:4], normalize))
# training and testing
ind <- sample(2, nrow(NorRerg), replace=TRUE, prob=c(0.67, 0.33))
Rerg.train<- NorRerg[ind==1,1:2]
Rerg.test<- NorRerg[ind==2,1:2]
#building the prediction lables
Rerg.trainLable<- regr[ind==1,2]
#check
print(Rerg.trainLable)
Rerg.testLable<- regr[ind==2,2]
print(Rerg.testLable)
NorRerg<- cbind(NorRerg,regr$ip)
View(NorRerg)
# training and testing
ind <- sample(2, nrow(NorRerg), replace=TRUE, prob=c(0.67, 0.33))
Rerg.train<- NorRerg[ind==1,1:2]
Rerg.test<- NorRerg[ind==2,1:2]
#building the prediction lables
Rerg.trainLable<- NorRerg[ind==1,3]
#check
print(Rerg.trainLable)
Rerg.testLable<- NorRerg[ind==2,3]
print(Rerg.testLable)
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=3)
Ip.predict
#checking if the model works
IpTestLabels <- data.frame(Rerg.testLable)
Combined <- data.frame(Ip.predict, Rerg.testLable)
View(Combined)
names(Combined) <- c("Predicted ", "Observed ")
View(Combined)
View(Combined)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=5)
#checking if the model works
IpTestLabels <- data.frame(Rerg.testLable)
Combined <- data.frame(Ip.predict, Rerg.testLable)
View(Combined)
View(IpTestLabels)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.test, k=5)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.testLable, k=5)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=5)
#factor vector with the predicted classes for each row of the test data
Ip.predict
Combined <- data.frame(Ip.predict)
Combined <- data.frame(Ip.predict,IpTestLabels)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=21)
#factor vector with the predicted classes for each row of the test data
Ip.predict
Combined <- data.frame(Ip.predict,Rerg.testLable)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=103)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=71)
Combined <- data.frame(Ip.predict,Rerg.testLable)
#install packages gmodels
install.packages("gmodels")
modsummary<- summary(linearmod)
modsummary<- summary(linearmod)
#model coefficients
modcoeeffs<- modsummary$coefficients
#best estimate for cikfreq
bestestm<- modcoeeffs["cikFreq","Estimate"]
#best estimate for cikfreq
bestestm<- modcoeeffs["ipFreq","Estimate"]
bestestm
modcoeeffs
#standard error
Std.Error<- modcoeeffs["ipFreq", "Std. Error"]
Std.Error
#t Value
t.value<- modcoeeffs["ipFreq", "t value"]
t.value
#creating a prediction for the linear model.
set.seed(100)
#train row indices
TrainingRow<- sample(1:nrow(regr), 0.8*norm(regr))
#train row indices
TrainingRow<- sample(1:nrow(regr[3:4]), 0.8*norm(regr[3:4]))
str(regr)
#train row indices
TrainingRow<- sample(1:nrow(regr[,3:4]), 0.8*norm(regr[,3:4]))
regr2<- regr[,3:4]
regr2$cikFreq<- as.numeric(regr2$cikFreq)
regr2$ipFreq<- as.numeric(regr2$ipFreq)
#train row indices
TrainingRow<- sample(1:nrow(regr2), 0.8*norm(regr2))
str(regr2)
#train row indices
TrainingRow<- sample(1:nrow(regr2), 0.8*nrow(regr2))
#train row indices
TrainingRow<- sample(1:nrow(regr), 0.8*nrow(regr))
#training data
TrainDAta<- regr[TrainingRow,]
TestData<- regr[-TrainingRow,]
# applying the model on training data
lmModl <- lm(cikFreq ~ ipFreq, data=TrainDAta)
#prediction
CikFreqPred <- predict(lmModl, TestData)
AIc(lmModl)
AIC(lmModl)
# predictios as data frame
predictsData <- data.frame(cbind(actuals=TestData$cikFreq, predicteds=CikFreqPred))
predictsData
cor(predictsData)
#setseed
set.seed(1234)
# training and testing
ind <- sample(2, nrow(NorRerg), replace=TRUE, prob=c(0.67, 0.33))
Rerg.train<- NorRerg[ind==1,1:2]
Rerg.test<- NorRerg[ind==2,1:2]
#building the prediction lables
Rerg.trainLable<- NorRerg[ind==1,3]
#check
print(Rerg.trainLable)
Rerg.testLable<- NorRerg[ind==2,3]
print(Rerg.testLable)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=71)
#factor vector with the predicted classes for each row of the test data
Ip.predict
#checking if the model works
IpTestLabels <- data.frame(Rerg.testLable)
Combined <- data.frame(Ip.predict,Rerg.testLable)
names(Combined) <- c("Predicted ", "Observed ")
View(Combined)
ggplot(top10,aes(x=ip,y= n,  fill=ip))+
geom_histogram(stat = "identity",colour="black", show.legend = T, binwidth = 5 )+
scale_fill_brewer(palette = "Paired")+
xlab("IpAdress")+
ylab("Log Frequency")+
theme(axis.text.y = element_text(angle = 45,hjust = 1,color = "blue"))+
ggtitle("Top 10 By Ipadress")+
theme(plot.title = element_text(face = "bold",size = 15))
View(a)
View(CikCount)
View(Rerg.test)
print(Rerg.testLable)
#building the prediction lables
Rerg.trainLable<- NorRerg[ind==1,2]
#check
print(Rerg.trainLable)
Rerg.testLable<- NorRerg[ind==2,2]
print(Rerg.testLable)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=71)
#factor vector with the predicted classes for each row of the test data
Ip.predict
#checking if the model works
IpTestLabels <- data.frame(Rerg.testLable)
Combined <- data.frame(Ip.predict,Rerg.testLable)
names(Combined) <- c("Predicted ", "Observed ")
View(Combined)
#building the prediction lables
Rerg.trainLable<- NorRerg[ind==1,1]
Rerg.testLable<- NorRerg[ind==2,1]
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=71)
#find the k nearest neighbors of our training set
Ip.predict<- knn(train = Rerg.train, test = Rerg.test, cl = Rerg.trainLable, k=3)
#factor vector with the predicted classes for each row of the test data
Ip.predict
#checking if the model works
IpTestLabels <- data.frame(Rerg.testLable)
Combined <- data.frame(Ip.predict,Rerg.testLable)
names(Combined) <- c("Predicted ", "Observed ")
